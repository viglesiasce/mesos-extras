{
  "id": "logstash",
  "cmd": "logstash -e 'input {
                         tcp { port => 5001 type => syslog }
                         udp { port => 5001 type => syslog }
                         tcp { port => 5002 type => heroku_syslog }
                         udp { port => 5002 type => heroku_syslog }
                         }
                       filter {
                         if [type] == \"syslog\" {
                                  grok {
                                    match => { \"message\" => \"%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\\[%{POSINT:syslog_pid}\\])?: %{GREEDYDATA:syslog_message}\" }
                                    add_field => [ \"received_at\", \"%{@timestamp}\" ]
                                    add_field => [ \"received_from\", \"%{host}\" ]
                                  }
                                  syslog_pri { }
                                  date {
                                    match => [ \"syslog_timestamp\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]
                                  }
                                }
                          else if [type] == \"heroku_syslog\" {
                              grok { match => { \"message\" => \"%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:timestamp}|-) +(?:%{HOSTNAME:heroku_drain_id}|-) +(?:%{WORD:heroku_source}|-) +(?:%{DATA:heroku_dyno}|-) +(?:%{WORD:syslog5424_msgid}|-) +(?:%{SYSLOG5424SD:syslog5424_sd}|-|) +%{GREEDYDATA:heroku_message}\" }}
                              mutate { rename => [\"heroku_message\", \"message\"] }
                              kv { source => \"message\" }
                              syslog_pri { syslog_pri_field_name => \"syslog5424_pri\" }
                          }
                      }
                      output { elasticsearch_http { host => \"search.marathon.mesos\" port => \"9200\" } }'",
  "cpus": 0.5,
  "mem": 512.0,
  "instances": 1,
  "ports": [5001, 5002],
  "requirePorts": true,
  "constraints": [["hostname", "UNIQUE"]],
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "logstash",
      "network": "HOST"
    }
  },
  "dependencies": ["/search"],
  "healthChecks": [
    {
      "portIndex": 0,
      "protocol": "TCP",
      "gracePeriodSeconds": 60,
      "intervalSeconds": 60,
      "timeoutSeconds": 10,
      "maxConsecutiveFailures": 3
    }
  ]
}
